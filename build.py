#!/usr/bin/python3

###
# DO NOT EDIT THIS FILE
###

#Import Settings
from settings import VERSIONS, REPO_NAME, PUSH_ON_BUILD

# Import Libs
import os
import subprocess

# Go though each server type
for server in VERSIONS.keys():
    # And each version for said server type
    for version in VERSIONS[server]:
        # Check if a custom docker imge file exists
        if os.path.exists('services/' + server + '/Dockerfile-' + version):
            dockerfile = 'services/' + server + '/Dockerfile-' + version
        else:
            dockerfile = 'services/' + server + "/Dockerfile"
        
        # Build the command
        cmd = 'docker build --no-cache services/' + server + ' -f ' + dockerfile
        cmd = cmd + ' --build-arg VERSION=' + version + ' -t %s:%s-%s' %(REPO_NAME,server,version)
        if("latest" not in VERSIONS[server] and VERSIONS[server][-1] == version):
            cmd = cmd + ' -t %s:%s-%s' %(REPO_NAME,server,'latest')
        
        # Run the command
        returned_value = subprocess.call(cmd, shell=True)
        # Exit if Error Occurs
        if(returned_value > 0):
            print("Failed to Build: %s:%s-%s" %(REPO_NAME,server,version))
            exit(returned_value)

        # Push the Image to dockerhub
        if PUSH_ON_BUILD:
            # Build command
            cmd = "docker push %s:%s-%s" %(REPO_NAME,server,version)
            if("latest" not in VERSIONS[server] and float(max(VERSIONS[server])) == float(version)):
                cmd = cmd + ' && docker push %s:%s-%s' %(REPO_NAME,server,'latest')
            # Run command
            returned_value = subprocess.call(cmd, shell=True)
            # Exit if Error Occurs
            if(returned_value > 0):
                print("Failed to Push: %s:%s-%s" %(REPO_NAME,server,version))
                exit(returned_value)

